import psutil
import time
import os
import subprocess
from rich.live import Live
from rich.table import Table
from rich.panel import Panel
from rich.console import Console

console = Console()

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
def get_temp():
    try:
        output = subprocess.check_output("sensors", encoding='utf-8')
        for line in output.splitlines():
            if any(k in line for k in ["Package id", "Tctl", "edge", "Composite"]):
                temp = line.split()[1]
                return temp.replace('+', '')
    except Exception as e:
        console.log(f"Error getting temperature: {e}")
        return "N/A"


# –ê–ø—Ç–∞–π–º
def get_uptime():
    uptime_sec = time.time() - psutil.boot_time()
    mins, secs = divmod(int(uptime_sec), 60)
    hours, mins = divmod(mins, 60)
    return f"{hours}h {mins}m"


# –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
def get_users():
    users = psutil.users()
    user_info = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        user_info.add(user.name)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ set
    if not user_info:
        user_info = "No users logged in."
    else:
        user_info = "\n".join(user_info)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    return user_info


# –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
def get_cpu_model():
    try:
        with open("/proc/cpuinfo", "r") as f:
            cpu_info = f.read()
        for line in cpu_info.splitlines():
            if line.startswith("model name"):
                return line.split(":")[1].strip()
        return "N/A"
    except Exception as e:
        return f"Error: {e}"


# –ú–æ–¥–µ–ª—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ NVIDIA –∏–ª–∏ AMD)
def get_gpu_model():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NVIDIA
        nvidia_check = subprocess.check_output("nvidia-smi", shell=True, stderr=subprocess.PIPE, encoding='utf-8')
        if "NVIDIA" in nvidia_check:
            # –ï—Å–ª–∏ —ç—Ç–æ NVIDIA, –ø–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ nvidia-smi
            output = subprocess.check_output("nvidia-smi --query-gpu=gpu_name --format=csv,noheader", shell=True, encoding='utf-8')
            return output.strip()
    except subprocess.CalledProcessError:
        pass  # –ï—Å–ª–∏ nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥–ª—è AMD

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ AMD
        output = subprocess.check_output("lspci | grep VGA", shell=True, encoding='utf-8')
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–∞—Ä—Ç—ã
        if "AMD" in output or "ATI" in output:
            # –ü—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
            gpu_name = output.split(":")[2].strip()
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            return " ".join(gpu_name.split()[:4])  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ —Å–ª–æ–≤–∞
        else:
            return "Unknown GPU"
    except subprocess.CalledProcessError:
        return "N/A"
    except Exception as e:
        return f"Error: {e}"


# –û—Å–Ω–æ–≤–Ω–æ–π HUD
def make_hud():
    cpu = psutil.cpu_percent(interval=None)
    ram = psutil.virtual_memory()
    swap = psutil.swap_memory()
    disk = psutil.disk_usage('/')
    net = psutil.net_io_counters()
    load1, load5, load15 = os.getloadavg()
    temp = get_temp()
    battery = psutil.sensors_battery()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processes = len(psutil.pids())

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CPU
    user_cpu, system_cpu, idle_cpu = psutil.cpu_times_percent(interval=None)[:3]
    user_cpu_str = f"[bold green]{user_cpu}%[/bold green]" if user_cpu < 80 else f"[bold orange1]{user_cpu}%[/bold orange1]"
    system_cpu_str = f"[bold green]{system_cpu}%[/bold green]" if system_cpu < 80 else f"[bold orange1]{system_cpu}%[/bold orange1]"
    idle_cpu_str = f"[bold green]{idle_cpu}%[/bold green]" if idle_cpu > 20 else f"[bold red]{idle_cpu}%[/bold red]"

    # CPU
    cpu_str = f"{cpu}%"
    if cpu > 90:
        cpu_str = f"[bold red]{cpu}%[/bold red]  [bold red]!!! CRITICAL !!![/bold red]"
    elif cpu > 80:
        cpu_str = f"[bold orange1]{cpu}%[/bold orange1]  [bold orange1]!!! HIGH !!![/bold orange1]"
    else:
        cpu_str = f"[bold green]{cpu}%[/bold green]"

    # RAM
    if ram.percent > 90:
        ram_str = f"[bold yellow]{ram.percent}%[/bold yellow]  [bold red]!!! CRITICAL !!![/bold red]"
    elif ram.percent > 80:
        ram_str = f"[bold yellow]{ram.percent}%[/bold yellow]  [bold orange1]!!! HIGH !!![/bold orange1]"
    else:
        ram_str = f"[bold green]{ram.percent}%[/bold green]"

    # Temp
    if temp != "N/A":
        try:
            temp_val = float(temp[:-2])  # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º ¬∞C
            if temp_val > 85:
                temp_str = f"[bold magenta]{temp}[/bold magenta]  [bold red]!!! CRITICAL !!![/bold red]"
            elif temp_val > 75:
                temp_str = f"[bold magenta]{temp}[/bold magenta]  [bold orange1]!!! HIGH !!![/bold orange1]"
            else:
                temp_str = f"[bold magenta]{temp}[/bold magenta]"
        except:
            temp_str = f"[bold magenta]{temp}[/bold magenta]"
    else:
        temp_str = "[dim]N/A[/dim]"

    # Disk
    if disk.percent > 90:
        disk_str = f"[bold red]{disk.percent}%[/bold red]  [bold red]!!! CRITICAL !!![/bold red]"
    elif disk.percent > 80:
        disk_str = f"[bold orange1]{disk.percent}%[/bold orange1]  [bold orange1]!!! HIGH !!![/bold orange1]"
    else:
        disk_str = f"[bold green]{disk.percent}%[/bold green]"

    # Load
    load_str = f"{load1:.2f}"
    if load1 > psutil.cpu_count():
        load_str = f"[bold red]{load_str}[/bold red]  [bold red]!!! OVERLOADED !!![/bold red]"
    elif load1 > psutil.cpu_count() * 0.75:
        load_str = f"[bold orange1]{load_str}[/bold orange1]  [bold orange1]!!! HIGH !!![/bold orange1]"
    else:
        load_str = f"[bold green]{load_str}[/bold green]"

    # Swap
    swap_str = f"{swap.percent}%"
    if swap.percent > 50:
        swap_str = f"[bold red]{swap.percent}%[/bold red]  [bold red]!!! CRITICAL !!![/bold red]"
    elif swap.percent > 30:
        swap_str = f"[bold orange1]{swap.percent}%[/bold orange1]  [bold orange1]!!! HIGH !!![/bold orange1]"
    else:
        swap_str = f"[bold green]{swap.percent}%[/bold green]"

    # Battery
    battery_str = "N/A"
    if battery:
        battery_str = f"{battery.percent:.2f}%"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if battery.power_plugged:
            battery_str = f"[bold green]{battery_str}[/bold green] (charging)"
        elif battery.percent < 20:
            battery_str = f"[bold red]{battery_str}[/bold red]  [bold red]!!! LOW !!![/bold red]"
        else:
            battery_str = f"[bold green]{battery_str}[/bold green]"

    # –ú–æ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
    cpu_model = get_cpu_model()
    gpu_model = get_gpu_model()

    # –¢–∞–±–ª–∏—Ü–∞ HUD
    table = Table.grid(padding=1)
    table.add_column(justify="right")
    table.add_column(justify="left")

    table.add_row("üß† CPU Load:", cpu_str)
    table.add_row("üíæ RAM Used:", ram_str)
    table.add_row("üîÅ Swap Used:", swap_str)
    table.add_row("üå°Ô∏è Temp:", temp_str)
    table.add_row("üìÄ Disk Usage:", disk_str)
    table.add_row("‚öôÔ∏è Load Avg:", load_str)
    table.add_row("üë• Processes:", f"[bold cyan]{processes}[/bold cyan]")
    table.add_row("üßë‚Äçüíª Users:", get_users())
    table.add_row("üì° Net Sent:", f"{net.bytes_sent // 1024} KB")
    table.add_row("üì• Net Recv:", f"{net.bytes_recv // 1024} KB")
    table.add_row("üîã Battery:", battery_str)
    table.add_row("‚è±Ô∏è Uptime:", f"{get_uptime()}")
    table.add_row("üñ•Ô∏è CPU Model:", cpu_model)
    table.add_row("üéÆ GPU Model:", gpu_model)

    panel = Panel(table, title="[bold green]SYSTEM HUD v1.0[/bold green]", border_style="bright_blue")
    return panel


# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
def main():
    with Live(make_hud(), refresh_per_second=1) as live:
        while True:
            time.sleep(1)
            live.update(make_hud())


main()
